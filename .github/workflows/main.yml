name: Monthly Build Check

on:
  schedule:
    - cron: '0 2 1 * *' 
  workflow_dispatch:

jobs:
  build-check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create local.properties with required values
        run: |
          cat > local.properties << EOF
          sdk.dir=/opt/android-sdk-linux
          RELEASE_STORE_FILE=dummy.jks
          RELEASE_STORE_PASSWORD=dummy123
          RELEASE_KEY_ALIAS=dummy
          RELEASE_KEY_PASSWORD=dummy123
          base64_of_encoded_decryption_key=dummy_key
          base64_of_encoded_verification_key=dummy_verification
          EOF

      - name: Create dummy keystore
        run: |
          keytool -genkeypair -v -keystore dummy.jks -keyalg RSA -keysize 2048 -validity 10000 -alias dummy -storepass dummy123 -keypass dummy123 -dname "CN=Dummy, OU=Dummy, O=Dummy, L=Dummy, S=Dummy, C=US"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Tests
        run: ./gradlew test --stacktrace

      - name: Build Debug APK
        run: ./gradlew assembleDebug --stacktrace

      - name: Get version info
        id: version
        run: |
          # Extract version numbers directly from root build.gradle.kts
          MAJOR=$(grep '"major" to [0-9]' build.gradle.kts | grep -o '[0-9]\+')
          MINOR=$(grep '"minor" to [0-9]' build.gradle.kts | grep -o '[0-9]\+')
          PATCH=$(grep '"patch" to [0-9]' build.gradle.kts | grep -o '[0-9]\+')
          BUILD=$(grep '"build" to [0-9]' build.gradle.kts | grep -o '[0-9]\+')

          # Set defaults if extraction fails
          MAJOR=${MAJOR:-1}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          BUILD=${BUILD:-1}

          # Create version name and code
          VERSION_NAME="${MAJOR}.${MINOR}.${PATCH}"
          VERSION_CODE=$((MAJOR * 1000000 + MINOR * 10000 + PATCH * 100 + BUILD))

          COMMIT_SHORT=$(git rev-parse --short HEAD)
          DATE=$(date +%Y%m%d)

          # Create clean tag name
          TAG_NAME="v${VERSION_NAME}-${DATE}-${COMMIT_SHORT}"

          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "version_code=${VERSION_CODE}" >> $GITHUB_OUTPUT
          echo "commit_short=${COMMIT_SHORT}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "date=${DATE}" >> $GITHUB_OUTPUT

          echo "Extracted values:"
          echo "MAJOR: $MAJOR"
          echo "MINOR: $MINOR" 
          echo "PATCH: $PATCH"
          echo "BUILD: $BUILD"
          echo "Version Name: $VERSION_NAME"
          echo "Version Code: $VERSION_CODE"
          echo "Tag Name: $TAG_NAME"

      - name: Find APK file
        id: apk_file
        run: |
          APK_PATH=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
          NEW_APK_NAME="app-debug-v${{ steps.version.outputs.version_name }}-${{ steps.version.outputs.date }}.apk"
          cp "$APK_PATH" "$NEW_APK_NAME"
          echo "apk_path=${NEW_APK_NAME}" >> $GITHUB_OUTPUT
          echo "apk_name=${NEW_APK_NAME}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: ${{ steps.version.outputs.tag_name }} | Monthly Build
          body: |
            ðŸš€ **Automated Monthly Build**

            **Build Info:**
            - Version: ${{ steps.version.outputs.version_name }}
            - Version Code: ${{ steps.version.outputs.version_code }}
            - Commit: ${{ steps.version.outputs.commit_short }}
            - Build Date: ${{ steps.version.outputs.date }}

            **Changes:**
            - Monthly automated build check
            - Debug APK build successful âœ…

            **Download:**
            - Debug APK available below
          files: ${{ steps.apk_file.outputs.apk_path }}
          draft: false
          prerelease: false

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-${{ steps.version.outputs.tag_name }}
          path: ${{ steps.apk_file.outputs.apk_path }}
          retention-days: 30

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Build failed! Check the logs for details."
          echo "Build failed at $(date)"

      - name: Notify on success
        if: success()
        run: |
          echo "::notice::âœ… Build completed successfully!"
          echo "::notice::Release created: ${{ steps.version.outputs.tag_name }}"
          echo "::notice::APK: ${{ steps.apk_file.outputs.apk_name }}"
